{"version":3,"file":"year-view.js","sourceRoot":"","sources":["../../../src/lib/datepicker/year-view.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { DateLocale } from './date-locale';\r\nimport { DateUtil } from './date-util';\r\nimport { Md2CalendarCell } from './calendar-body';\r\nimport { MD_DATE_FORMATS, MdDateFormats } from '../core/datetime/date-formats';\r\nimport { slideCalendar } from './datepicker-animations';\r\n\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'md2-year-view',\r\n  templateUrl: 'year-view.html',\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class Md2YearView implements AfterContentInit {\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): Date { return this._activeDate; }\r\n  set activeDate(value: Date) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate = value || this._util.today();\r\n    if (oldActiveDate && this._activeDate &&\r\n      !this._util.isSameYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n      // if (oldActiveDate < this._activeDate) {\r\n      //  this.calendarState('right');\r\n      // } else {\r\n      //  this.calendarState('left');\r\n      // }\r\n    }\r\n  }\r\n  private _activeDate: Date;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): Date { return this._selected; }\r\n  set selected(value: Date) {\r\n    this._selected = value;\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n  }\r\n  private _selected: Date;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: Date) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() selectedChange = new EventEmitter<Date>();\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: Md2CalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number;\r\n\r\n  _calendarState: string;\r\n\r\n  constructor(private _locale: DateLocale, public _util: DateUtil,\r\n    @Optional() @Inject(MD_DATE_FORMATS) private _dateFormats: MdDateFormats) {\r\n    if (!this._dateFormats) {\r\n      throw Error('MD_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._util.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    this.selectedChange.emit(this._util.createDate(\r\n      this._util.getYear(this.activeDate), month,\r\n      this._util.getDate(this.activeDate),\r\n      this._util.getHours(this.activeDate),\r\n      this._util.getMinutes(this.activeDate),\r\n      this._util.getSeconds(this.activeDate)));\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  private _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._util.today());\r\n    this._yearLabel = this._locale.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._locale.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(row => row.map(\r\n      month => this._createCellForMonth(month, monthNames[month])));\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: Date) {\r\n    return this._util.isSameYear(date, this.activeDate) ?\r\n      this._util.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MdCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._locale.format(\r\n      this._util.createDate(this._util.getYear(this.activeDate), month, 1,\r\n        this._util.getHours(this.activeDate),\r\n        this._util.getMinutes(this.activeDate),\r\n        this._util.getSeconds(this.activeDate)),\r\n      this._dateFormats.display.monthYearA11yLabel);\r\n    return new Md2CalendarCell(\r\n      month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _isMonthEnabled(month: number) {\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    let firstOfMonth = this._util.createDate(\r\n      this._util.getYear(this.activeDate), month, 1,\r\n      this._util.getHours(this.activeDate),\r\n      this._util.getMinutes(this.activeDate),\r\n      this._util.getSeconds(this.activeDate));\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._util.getMonth(date) == month;\r\n      date = this._util.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private calendarState(direction: string): void {\r\n    this._calendarState = direction;\r\n  }\r\n\r\n  _calendarStateDone() {\r\n    this._calendarState = '';\r\n  }\r\n\r\n}\r\n"]}